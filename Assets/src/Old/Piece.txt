using System;
using UnityEngine;
using UnityEngine.Scripting;
using UnityEngine.UIElements;
using UnityEngine.Windows;

internal class Piece
{
    private Sprite sprite;
    protected Vector2 position;
    public void InitializePieces()
    {
        LoadFEN("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    }

    public void LoadFEN(string FEN)
    {
        ClearBoard();

        int rank = 7;
        int file = 0;
        int set = 0;
        char color = 'd';

        foreach (char c in FEN)
        {
            if (Char.IsUpper(c))
            {
                color = 'l';
            }
            else
            {
                color = 'd';
            }

            if (c == ' ')
            {
                set++;
            }

            switch (set)
            {
                case 0: // Piece Placement
                    {
                        char letter = Char.ToLower(c);
                        switch (letter)
                        {
                            case 'p':
                                {
                                    boardArray[file, rank] = new Pawn(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case 'r':
                                {
                                    boardArray[file, rank] = new Rook(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case 'n':
                                {
                                    boardArray[file, rank] = new Knight(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case 'b':
                                {
                                    boardArray[file, rank] = new Bishop(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case 'k':
                                {
                                    boardArray[file, rank] = new King(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case 'q':
                                {
                                    boardArray[file, rank] = new Queen(new Vector2(file, rank), color);
                                    file++;
                                    break;
                                }

                            case '/':
                                {
                                    rank--;
                                    file = 0;
                                    break;
                                }

                            default:
                                {
                                    if (Char.IsDigit(c))
                                    {
                                        file += (int)Char.GetNumericValue(c);
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                case 1: // Side To Move
                    {
                        if (c == 'w')
                        {
                            //turn = 'l';
                        }
                        else
                        {
                            //turn = 'd';
                        }
                        break;
                    }

                case 2: // Castling Ability
                    {
                        break;
                    }

                case 3: // Enpassant Target Square
                    {
                        break;
                    }

                case 4: // Half Move Counter
                    {
                        break;
                    }

                case 5: //Full Move Counter
                    {
                        break;
                    }

            }
        }
    }

    public void GenerateFEN()
    {

    }

    public void ClearBoard()
    {

    }

    public void CheckIntersect()
    {
        
    }

    public void Captured()
    {

    }

    public void drawPiece(Texture2D texture)
    {
        Rect rect = new Rect(0, 0, texture.width, texture.height);
        sprite = Sprite.Create(texture, rect, new Vector2(0.5f, 0.5f), 100.0f);

        GameObject gameObject = new GameObject("Pawn");
        SpriteRenderer spriteRenderer = gameObject.AddComponent<SpriteRenderer>();
        spriteRenderer.sprite = sprite;

        gameObject.transform.position = position * GraphicalBoard.boardScaleFactor;
        gameObject.transform.localScale = new Vector2(2 * GraphicalBoard.boardScaleFactor, 2 * GraphicalBoard.boardScaleFactor);

        gameObject.AddComponent<BoxCollider2D>();
        gameObject.AddComponent<PieceDrag>();
    }
}
